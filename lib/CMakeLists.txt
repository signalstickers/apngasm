PROJECT(APNGASM_LIB)
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

SET(APNGASM_LIB_VERSION_MAJOR 3)
SET(APNGASM_LIB_VERSION_MINOR 1)
SET(APNGASM_LIB_VERSION_PATCH 9)

SET(APNGASM_LIB_VERSION "${APNGASM_LIB_VERSION_MAJOR}.${APNGASM_LIB_VERSION_MINOR}.${APNGASM_LIB_VERSION_PATCH}")


# cmake policy
IF(POLICY CMP0026)
  CMAKE_POLICY(SET CMP0026 OLD)
ENDIF(POLICY CMP0026)

CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/src/apngasm-version.h.in ${PROJECT_BINARY_DIR}/src/apngasm-version.h @ONLY)
INCLUDE_DIRECTORIES(${PROJECT_BINARY_DIR}/src)

CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/manifest.txt.in ${PROJECT_BINARY_DIR}/manifest.txt @ONLY)


# shared library and sources
SET(APNGASM_DYNAMIC_LIB_TARGET apngasm)

SET(TYP SHARED)
if (NOT BUILD_SHARED_LIBS)
  SET(TYP STATIC)
endif()

ADD_LIBRARY(${APNGASM_DYNAMIC_LIB_TARGET} ${TYP}
  ${PROJECT_SOURCE_DIR}/src/apngasm.cpp
  ${PROJECT_SOURCE_DIR}/src/apngframe.cpp
  ${PROJECT_SOURCE_DIR}/src/spec/specreader.cpp
  ${PROJECT_SOURCE_DIR}/src/spec/specwriter.cpp
  ${PROJECT_SOURCE_DIR}/src/spec/priv/specreaderimpl.cpp
  ${PROJECT_SOURCE_DIR}/src/spec/priv/specwriterimpl.cpp
  ${PROJECT_SOURCE_DIR}/src/listener/apngasmlistener.cpp
)
SET_TARGET_PROPERTIES(${APNGASM_DYNAMIC_LIB_TARGET}
	PROPERTIES
  CXX_STANDARD 17
)

# Link libraries
TARGET_LINK_LIBRARIES(${APNGASM_DYNAMIC_LIB_TARGET} stdc++fs)

FIND_PACKAGE(PNG REQUIRED)
INCLUDE_DIRECTORIES(${PNG_INCLUDE_DIR})
TARGET_LINK_LIBRARIES(${APNGASM_DYNAMIC_LIB_TARGET} ${PNG_LIBRARY})
MESSAGE(${PNG_VERSION_STRING})

FIND_PACKAGE(ZLIB REQUIRED)
INCLUDE_DIRECTORIES(${ZLIB_INCLUDE_DIRS})
TARGET_LINK_LIBRARIES(${APNGASM_DYNAMIC_LIB_TARGET} ${ZLIB_LIBRARIES})

IF(APPLE OR WIN32)
  SET(Boost_USE_STATIC_LIBS ON)
ENDIF(APPLE OR WIN32)
FIND_PACKAGE(Boost REQUIRED COMPONENTS program_options regex system)
INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})
TARGET_LINK_LIBRARIES(${APNGASM_DYNAMIC_LIB_TARGET} ${Boost_LIBRARIES})

# Installation
INSTALL(FILES
  ${PROJECT_SOURCE_DIR}/src/apngasm.h
  ${PROJECT_SOURCE_DIR}/src/apngframe.h
  ${PROJECT_SOURCE_DIR}/src/apngasm-conf.h
  ${PROJECT_BINARY_DIR}/src/apngasm-version.h
  DESTINATION "include")

IF(NOT DEFINED LIB_INSTALL_DIR)
  SET (LIB_INSTALL_DIR "lib")
ENDIF(NOT DEFINED LIB_INSTALL_DIR)

INSTALL(TARGETS ${APNGASM_DYNAMIC_LIB_TARGET} DESTINATION ${LIB_INSTALL_DIR})

# Create package command
SET(PACKAGE_DIR ${PROJECT_BINARY_DIR}/package)
SET(INSTALL_HEADERS "${PROJECT_SOURCE_DIR}/src/apngasm.h ${PROJECT_SOURCE_DIR}/src/apngframe.h ${PROJECT_SOURCE_DIR}/src/apngasm-conf.h ${PROJECT_BINARY_DIR}/src/apngasm-version.h")
GET_PROPERTY(INSTALL_LIBS TARGET ${APNGASM_DYNAMIC_LIB_TARGET} PROPERTY LOCATION)

IF(WIN32)
  STRING(REPLACE "$(Configuration)" "\\\${CMAKE_INSTALL_CONFIG_NAME}" INSTALL_LIBS "${INSTALL_LIBS}")
ENDIF(WIN32)

CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/package/CMakeLists.txt.in ${PACKAGE_DIR}/CMakeLists.txt @ONLY)

IF(UNIX OR APPLE)
  ADD_CUSTOM_TARGET(
    package-lib
    COMMAND ${CMAKE_COMMAND} .
    COMMAND ${CMAKE_MAKE_PROGRAM} package
    WORKING_DIRECTORY ${PACKAGE_DIR}
  )
ENDIF(UNIX OR APPLE)

# Package .in
IF(NOT WIN32 OR CYGWIN OR MINGW)
  # Set some pkg-config variables
  SET(prefix      ${CMAKE_INSTALL_PREFIX})
  SET(exec_prefix ${CMAKE_INSTALL_PREFIX})
  set(libdir      ${CMAKE_INSTALL_PREFIX}/${LIB_INSTALL_DIR})
  set(includedir  ${CMAKE_INSTALL_PREFIX}/include)
  SET(LIBS "-lz -lpng")

  # CMake lists are separated by a semi colon, replace with colon
  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/libapngasm.pc.in ${CMAKE_CURRENT_BINARY_DIR}/libapngasm.pc @ONLY)
  INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/libapngasm.pc DESTINATION ${LIB_INSTALL_DIR}/pkgconfig)
endif(NOT WIN32 OR CYGWIN OR MINGW)


# SWIG
OPTION(RUBY "Build Ruby interfaces")
OPTION(JAVA "Build Java interfaces")

IF(RUBY)
  INCLUDE(${PROJECT_SOURCE_DIR}/interfaces/ruby/CMakeLists.txt)
ENDIF(RUBY)

IF(JAVA)
  INCLUDE(${PROJECT_SOURCE_DIR}/interfaces/java/CMakeLists.txt)
ENDIF(JAVA)

IF(ANDROID)
  INCLUDE(${PROJECT_SOURCE_DIR}/interfaces/android/CMakeLists.txt)
ENDIF(ANDROID)
